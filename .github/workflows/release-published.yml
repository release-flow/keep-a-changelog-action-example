on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release version'
        type: string
        required: true


name: '[autorelease] Release published'

jobs:
  update-ref:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get release version
      id: get-release-version
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        if [[ ! $VERSION ]]; then
          VERSION="${{ github.event.inputs.release-version }}"
        fi

        RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $VERSION =~ $RE ]]; then
          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"
          PATCH="${BASH_REMATCH[3]}"
          PRERELEASE="${BASH_REMATCH[4]}"
        else
          echo "::error::Version '$VERSION' is not in a valid format" && exit 1
        fi

        echo "::set-output name=major-ref::v$MAJOR"
        if [[ "$PRERELEASE" ]]; then pre=true; else pre=false; fi
        echo "::set-output name=is-prerelease::$pre"

    - name: Prerelease
      if: fromJSON(steps.get-release-version.outputs.is-prerelease)
      run: |
        echo "::notice::Pre-release version detected, not moving ref  ${{ steps.get-release-version.outputs.major-ref }}"

    - name: Update major release ref
      if: ${{ ! fromJSON(steps.get-release-version.outputs.is-prerelease) }}
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        if [[ ! $VERSION ]]; then
          VERSION="${{ github.event.inputs.release-version }}"
        fi
        MAJOR_REF="${{ steps.get-release-version.outputs.major-ref }}"
        git tag -fa $MAJOR_REF -m "Update $MAJOR_REF tag" $VERSION
        git push origin $MAJOR_REF --force
        echo "::notice::Updated ref $MAJOR_REF"

